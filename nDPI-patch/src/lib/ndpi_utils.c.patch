--- /home/chrisn/src/6/ndpi-netfilter/nDPI//src/lib/ndpi_utils.c	2021-07-22 13:19:50.924012830 +0000
+++ /home/chrisn/src/6/ndpi-netfilter/nDPI-patch//src/lib/ndpi_utils.c	2021-07-22 15:34:43.560352788 +0000
@@ -21,11 +21,11 @@
  *
  */
 
-
+#ifndef __KERNEL__
 #include <stdlib.h>
 #include <errno.h>
 #include <sys/types.h>
-
+#endif
 
 #define NDPI_CURRENT_PROTO NDPI_PROTOCOL_UNKNOWN
 
@@ -36,10 +36,13 @@
 #include "ahocorasick.h"
 #include "libcache.h"
 
+#ifndef __KERNEL__
 #include <time.h>
+#define printf printk
 #ifndef WIN32
 #include <unistd.h>
 #endif
+#endif
 
 #if defined __FreeBSD__ || defined __NetBSD__ || defined __OpenBSD__
 #include <sys/endian.h>
@@ -191,6 +194,17 @@
 }
 
 /* ****************************************** */
+// TODO - some combination of snprintf() and %pI4/%pI6 may work here
+const char * ndpi_inet_ntop(int af, void* src,
+                             char* dst, size_t size)
+{
+  return NULL;
+}
+
+char * ndpi_inet_ntoa(struct in_addr in) 
+{
+  return NULL;
+}
 
 /* Walk the nodes of a tree */
 static void ndpi_tdestroy_recurse(ndpi_node* root, void (*free_action)(void *))
@@ -1070,7 +1084,8 @@
   }
 
   if(i) {
-    for(int j = i; j < 3; j++)
+    int j;
+    for(j = i; j < 3; j++)
       char_array_3[j] = '\0';
 
     char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;
@@ -1078,7 +1093,7 @@
     char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6);
     char_array_4[3] = char_array_3[2] & 0x3f;
 
-    for(int j = 0; (j < i + 1); j++)
+    for(j = 0; (j < i + 1); j++)
       ret[len++] = base64_table[char_array_4[j]];
 
     while((i++ < 3))
@@ -1118,6 +1133,7 @@
 		  struct ndpi_flow_struct *flow,
 		  ndpi_protocol l7_protocol,
 		  ndpi_serializer *serializer) {
+#if 0
   char buf[64];
 
   if(flow == NULL) return(-1);
@@ -1166,7 +1182,7 @@
     ndpi_serialize_string_uint32(serializer, "query_type",  flow->protos.dns.query_type);
     ndpi_serialize_string_uint32(serializer, "rsp_type",    flow->protos.dns.rsp_type);
 
-    inet_ntop(AF_INET, &flow->protos.dns.rsp_addr, buf, sizeof(buf));
+    ndpi_inet_ntop(AF_INET, &flow->protos.dns.rsp_addr, buf, sizeof(buf));
     ndpi_serialize_string_string(serializer, "rsp_addr",    buf);
     ndpi_serialize_end_of_block(serializer);
     break;
@@ -1319,7 +1335,7 @@
     }
     break;
   } /* switch */
-
+#endif
   return(0);
 }
 
@@ -1341,11 +1357,11 @@
     return(-1);
 
   if(ip_version == 4) {
-    inet_ntop(AF_INET, &src_v4, src_name, sizeof(src_name));
-    inet_ntop(AF_INET, &dst_v4, dst_name, sizeof(dst_name));
+    ndpi_inet_ntop(AF_INET, &src_v4, src_name, sizeof(src_name));
+    ndpi_inet_ntop(AF_INET, &dst_v4, dst_name, sizeof(dst_name));
   } else {
-    inet_ntop(AF_INET6, src_v6, src_name, sizeof(src_name));
-    inet_ntop(AF_INET6, dst_v6, dst_name, sizeof(dst_name));
+    ndpi_inet_ntop(AF_INET6, src_v6, src_name, sizeof(src_name));
+    ndpi_inet_ntop(AF_INET6, dst_v6, dst_name, sizeof(dst_name));
     /* For consistency across platforms replace :0: with :: */
     ndpi_patchIPv6Address(src_name), ndpi_patchIPv6Address(dst_name);
   }
@@ -1488,7 +1504,7 @@
     #endif
   }
 
-  free((void *)pcreErrorStr);
+  ndpi_free((void *)pcreErrorStr);
 }
 
 static int ndpi_is_rce_injection(char* query) {
@@ -1563,7 +1579,7 @@
 /* ********************************** */
 
 ndpi_risk_enum ndpi_validate_url(char *url) {
-  char *orig_str = NULL, *str = NULL, *question_mark = strchr(url, '?');
+  char *orig_str = NULL, *str = NULL, *p = NULL, *question_mark = strchr(url, '?');
   ndpi_risk_enum rc = NDPI_NO_RISK;
 
   if(question_mark) {
@@ -1573,7 +1589,8 @@
 
     if(!str) goto validate_rc;
 
-    str = strtok_r(str, "&", &tmp);
+    p = str;
+    str = strsep(&p, "&");
 
     while(str != NULL) {
       char *value = strchr(str, '=');
@@ -1613,7 +1630,7 @@
 	  break;
       }
       
-      str = strtok_r(NULL, "&", &tmp);
+      str = strsep(&p, "&");
     }
   }
 
