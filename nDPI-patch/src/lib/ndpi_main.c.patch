--- /home/chrisn/src/6/ndpi-netfilter/nDPI//src/lib/ndpi_main.c	2021-07-22 13:19:50.924012830 +0000
+++ /home/chrisn/src/6/ndpi-netfilter/nDPI-patch//src/lib/ndpi_main.c	2021-07-22 13:43:02.264071278 +0000
@@ -21,9 +21,11 @@
  *
  */
 
+#ifndef __KERNEL__
 #include <stdlib.h>
 #include <errno.h>
 #include <sys/types.h>
+#endif
 
 #define NDPI_CURRENT_PROTO NDPI_PROTOCOL_UNKNOWN
 
@@ -32,24 +34,50 @@
 #include "ahocorasick.h"
 #include "libcache.h"
 
-#ifdef HAVE_LIBGCRYPT
+#if defined(HAVE_LIBGCRYPT) && !defined(__KERNEL__)
 #include <gcrypt.h>
 #endif
 
+#ifdef __KERNEL__
+#include <linux/version.h>
+#define printf printk
+#else
 #include <time.h>
 #ifndef WIN32
 #include <unistd.h>
 #endif
+#endif
 
+#ifndef __KERNEL__
 #if defined __FreeBSD__ || defined __NetBSD__ || defined __OpenBSD__
 #include <sys/endian.h>
 #endif
+#endif
 
 #include "ndpi_content_match.c.inc"
 #include "third_party/include/ndpi_patricia.h"
 #include "third_party/include/ht_hash.h"
 #include "third_party/include/ndpi_md5.h"
 
+#ifdef __KERNEL__
+extern int atoi(const char *str) {
+  int rc;
+
+  if(kstrtoint(str, 0, &rc) == 0 /* Success */)
+    return(rc);
+  else
+    return(0);
+}
+// http://lkml.iu.edu/hypermail/linux/kernel/0303.2/2007.html
+static unsigned int inet_addr(char *str)
+{
+  int a,b,c,d;
+  char arr[4];
+  sscanf(str,"%d.%d.%d.%d",&a,&b,&c,&d);
+  arr[0] = a; arr[1] = b; arr[2] = c; arr[3] = d;
+  return *(unsigned int*)arr;
+}
+#endif
 /* stun.c */
 extern u_int32_t get_stun_lru_key(struct ndpi_flow_struct *flow, u_int8_t rev);
 
@@ -84,7 +112,11 @@
 /* ****************************************** */
 
 void *ndpi_malloc(size_t size) {
+#ifndef __KERNEL__
   return(_ndpi_malloc ? _ndpi_malloc(size) : malloc(size));
+#else
+  return(_ndpi_malloc ? _ndpi_malloc(size) : kmalloc(size, GFP_KERNEL));  
+#endif
 }
 void *ndpi_flow_malloc(size_t size) {
   return(_ndpi_flow_malloc ? _ndpi_flow_malloc(size) : ndpi_malloc(size));
@@ -110,7 +142,11 @@
       _ndpi_free(ptr);
   } else {
     if(ptr)
+#ifndef __KERNEL__      
       free(ptr);
+#else
+      kfree(ptr);
+#endif    
   }
 }
 
@@ -551,6 +587,7 @@
 
 /* Self check function to be called onli for testing purposes */
 void ndpi_self_check_host_match() {
+#if 0
   u_int32_t i, j;
 
   for (i = 0; host_match[i].string_to_match != NULL; i++) {
@@ -563,6 +600,7 @@
       }
     }
   }
+#endif
 }
 
 /* ******************************************************************** */
@@ -1704,10 +1742,11 @@
 */
 int ndpi_load_ipv4_ptree(struct ndpi_detection_module_struct *ndpi_str,
 			 const char *path, u_int16_t protocol_id) {
+  u_int num_loaded = 0;
+#if 0
   char buffer[128], *line, *addr, *cidr, *saveptr;
   FILE *fd;
   int len;
-  u_int num_loaded = 0;
 
   fd = fopen(path, "r");
 
@@ -1745,6 +1784,7 @@
   }
 
   fclose(fd);
+ #endif
   return(num_loaded);
 }
 
@@ -1804,7 +1844,12 @@
     }
   }
 
+#ifndef __KERNEL__
   inet_pton(AF_INET, value, &pin);
+#else
+  in4_pton(value, -1, (__u8*)&pin, '\0', NULL);
+#endif
+
 
   if((node = add_to_ptree(ndpi_str->protocols_ptree, AF_INET, &pin, bits)) != NULL) {
     node->value.uv.user_value = protocol_id, node->value.uv.additional_user_value = htons(port);
@@ -2000,7 +2045,7 @@
   NDPI_BITMASK_RESET(ndpi_str->debug_bitmask);
 #endif /* NDPI_ENABLE_DEBUG_MESSAGES */
 
-#ifdef HAVE_LIBGCRYPT
+#if defined(HAVE_LIBGCRYPT) && !defined(__KERNEL__)
   if(!(prefs & ndpi_dont_init_libgcrypt)) {
     if(!gcry_control (GCRYCTL_INITIALIZATION_FINISHED_P)) {
       const char *gcrypt_ver = gcry_check_version(NULL);
@@ -2284,7 +2329,12 @@
   if(ptr)
     ptr[0] = '\0';
 
-  if(inet_pton(AF_INET, ipbuf, &pin) == 1) {
+#ifndef __KERNEL__
+  int i = inet_pton(AF_INET, ipbuf, &pin);
+#else
+  int i = in4_pton(ipbuf, -1, (__u8*)&pin, '\0', NULL);
+#endif
+  if(i == 1) {
     /* Search IP */
     prefix_t prefix;
     patricia_node_t *node;
@@ -2688,9 +2738,10 @@
  *  - empty lines or lines starting with # are ignored
  */
 int ndpi_load_categories_file(struct ndpi_detection_module_struct *ndpi_str, const char *path) {
+  int len, num = 0;
+#if 0
   char buffer[512], *line, *name, *category, *saveptr;
   FILE *fd;
-  int len, num = 0;
 
   fd = fopen(path, "r");
 
@@ -2727,7 +2778,7 @@
 
   fclose(fd);
   ndpi_enable_loaded_categories(ndpi_str);
-
+#endif
   return(num);
 }
 
@@ -2749,6 +2800,7 @@
 
 */
 int ndpi_load_protocols_file(struct ndpi_detection_module_struct *ndpi_str, const char *path) {
+#if 0
   FILE *fd;
   char *buffer, *old_buffer;
   int chunk_len = 512, buffer_len = chunk_len, old_buffer_len;
@@ -2811,6 +2863,9 @@
 
  error:
   return(rc);
+#else
+  return(0);
+#endif
 }
 
 /* ******************************************************************** */
@@ -4277,7 +4332,12 @@
       bits = atoi(ptr);
   }
 
-  if(inet_pton(AF_INET, ipbuf, &pin) != 1) {
+#ifndef __KERNEL__
+    int i = inet_pton(AF_INET, ipbuf, &pin);
+#else
+    int i = in4_pton(ipbuf, -1, (__u8*)&pin, '\0', NULL);
+#endif
+    if(i != 1) {
     NDPI_LOG_DBG2(ndpi_str, "Invalid ip/ip+netmask: %s\n", ip_address_and_mask);
     return(-1);
   }
@@ -4314,7 +4374,7 @@
   memset(&ac_pattern, 0, sizeof(ac_pattern));
 
   if(ndpi_str->custom_categories.hostnames_shadow.ac_automa == NULL) {
-    free(name);
+    ndpi_free(name);
     return(-1);
   }
 
@@ -4323,12 +4383,12 @@
 
   rc = ac_automata_add(ndpi_str->custom_categories.hostnames_shadow.ac_automa, &ac_pattern);
   if(rc != ACERR_DUPLICATE_PATTERN && rc != ACERR_SUCCESS) {
-    free(name);
+    ndpi_free(name);
     return(-1);
   }
 
   if(rc == ACERR_DUPLICATE_PATTERN)
-    free(name);
+    ndpi_free(name);
 
   return(0);
 }
@@ -5691,7 +5751,7 @@
 
 #ifdef NDPI_DETECTION_SUPPORT_IPV6
   if(ndpi_is_ipv6(ip)) {
-    if(inet_ntop(AF_INET6, &ip->ipv6.u6_addr, buf, buf_len) == NULL)
+    if(ndpi_inet_ntop(AF_INET6, &ip->ipv6.u6_addr, buf, buf_len) == NULL)
       buf[0] = '\0';
 
     return(buf);
@@ -5710,12 +5770,23 @@
   int rv = -1;
   memset(parsed_ip, 0, sizeof(*parsed_ip));
 
+  int i;
   if(strchr(ip_str, '.')) {
-    if(inet_pton(AF_INET, ip_str, &parsed_ip->ipv4) > 0)
+#ifndef __KERNEL__
+    i = inet_pton(AF_INET, ip_str, &parsed_ip->ipv4);
+#else
+    i = in4_pton(ip_str, -1, (__u8*)&parsed_ip->ipv4, '\0', NULL);
+#endif
+    if(i > 0)
       rv = 4;
 #ifdef NDPI_DETECTION_SUPPORT_IPV6
   } else {
-    if(inet_pton(AF_INET6, ip_str, &parsed_ip->ipv6) > 0)
+#ifndef __KERNEL__
+    i = inet_pton(AF_INET6, ip_str, &parsed_ip->ipv6);
+#else
+    i = in6_pton(ip_str, -1, (__u8*)&parsed_ip->ipv6, '\0', NULL);
+#endif    
+    if(i > 0)
       rv = 6;
 #endif
   }
@@ -6378,7 +6449,6 @@
   return(0);
 }
 
-#ifdef CODE_UNUSED
 int NDPI_BITMASK_IS_EMPTY(NDPI_PROTOCOL_BITMASK a) {
   int i;
 
@@ -6389,6 +6459,7 @@
   return(1);
 }
 
+#ifdef CODE_UNUSED
 void NDPI_DUMP_BITMASK(NDPI_PROTOCOL_BITMASK a) {
   int i;
 
@@ -6404,7 +6475,7 @@
 }
 
 const char *ndpi_get_gcrypt_version(void) {
-#ifdef HAVE_LIBGCRYPT
+#if defined(HAVE_LIBGCRYPT) && !defined(__KERNEL__)
   return gcry_check_version(NULL);
 #endif
   return NULL;
@@ -6831,7 +6902,8 @@
     tmp[j] = '\0';
     len = j;
 
-    for(word = strtok_r(tmp, ".", &tok_tmp); ; word = strtok_r(NULL, ".", &tok_tmp)) {
+    char* p = tmp;
+    while ((word = strsep(&p, ".")) != NULL) {
       if(!word) break;
 
       num_words++;
