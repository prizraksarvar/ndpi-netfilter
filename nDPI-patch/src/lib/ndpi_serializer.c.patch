--- /home/chrisn/src/ndpi-netfilter/nDPI//src/lib/ndpi_serializer.c	2022-06-30 09:34:28.866051274 -0400
+++ /home/chrisn/src/ndpi-netfilter/nDPI-patch//src/lib/ndpi_serializer.c	2022-06-30 11:26:26.042333451 -0400
@@ -22,14 +22,17 @@
 #include "ndpi_config.h"
 #endif
 
+#ifndef __KERNEL__
 #include <stdlib.h>
 #include <errno.h>
 #include <inttypes.h>
 #include <sys/types.h>
+#endif
 
 #include "ndpi_api.h"
 #include "ndpi_config.h"
 
+#ifndef __KERNEL__
 #include <time.h>
 #ifndef WIN32
 #include <unistd.h>
@@ -38,6 +41,7 @@
 #if defined __FreeBSD__ || defined __NetBSD__ || defined __OpenBSD__
 #include <sys/endian.h>
 #endif
+#endif
 
 #ifdef WIN32
 #define NDPI_I64_FORMAT "%" PRId64
@@ -203,7 +207,7 @@
 
 static int ndpi_init_serializer_buffer(ndpi_private_serializer_buffer *buffer, u_int32_t buffer_size) {
   buffer->initial_size = buffer->size = buffer_size;
-  buffer->data = (u_int8_t *) calloc(buffer->size, sizeof(u_int8_t));
+  buffer->data = (u_int8_t *)ndpi_calloc(buffer->size, sizeof(u_int8_t));
   if(buffer->data == NULL)
     return(-1);
 
@@ -269,7 +273,7 @@
   new_size = buffer->size + min_len;
   new_size = ((new_size / 4) + 1) * 4; /* required by zmq encryption */
 
-  r = realloc((void *) buffer->data, new_size);
+  r = ndpi_realloc((void *) buffer->data, buffer->size, new_size);
 
   if(r == NULL)
     return(-1);
@@ -433,13 +437,13 @@
   ndpi_private_serializer *serializer = (ndpi_private_serializer*)_serializer;
 
   if(serializer->buffer.data) {
-    free(serializer->buffer.data);
+    ndpi_free(serializer->buffer.data);
     serializer->buffer.size = 0;
     serializer->buffer.data = NULL;
   }
 
   if(serializer->header.data) {
-    free(serializer->header.data);
+    ndpi_free(serializer->header.data);
     serializer->header.size = 0;
     serializer->header.data = NULL;
   }
@@ -568,11 +572,12 @@
 /* ********************************** */
 
 /* TODO: fix portability across platforms */
+#if 0
 static inline void ndpi_deserialize_single_float(ndpi_private_deserializer *deserializer,
 						 u_int32_t offset, float *s) {
   *s = *(float*)&deserializer->buffer.data[offset];
 }
-
+#endif
 /* ********************************** */
 
 static inline void ndpi_deserialize_single_string(ndpi_private_deserializer *deserializer,
@@ -1019,7 +1024,7 @@
 }
 
 /* ********************************** */
-
+#if 0
 int ndpi_serialize_uint32_float(ndpi_serializer *_serializer,
 				u_int32_t key, float value,
                                 const char *format /* e.f. "%.2f" */) {
@@ -1073,7 +1078,7 @@
   serializer->status.flags |= NDPI_SERIALIZER_STATUS_NOT_EMPTY;
   return(0);
 }
-
+#endif
 /* ********************************** */
 
 static int ndpi_serialize_uint32_binary(ndpi_serializer *_serializer,
@@ -1575,7 +1580,7 @@
 }
 
 /* ********************************** */
-
+#if 0
 int ndpi_serialize_binary_float(ndpi_serializer *_serializer,
 			        const char *key,
 			        u_int16_t klen,
@@ -1643,7 +1648,7 @@
 				const char *format /* e.f. "%.2f" */) {
   return(ndpi_serialize_binary_float(_serializer, key, strlen(key), value, format));
 }
-
+#endif
 /* ********************************** */
 
 /* Key is a <string, len> pair, value is a raw value */
@@ -2185,9 +2190,11 @@
   case ndpi_serialization_int64:
     size = sizeof(u_int64_t);
     break;
+#if 0    
   case ndpi_serialization_float:
     size = sizeof(float);
     break;
+#endif
   case ndpi_serialization_string:
   case ndpi_serialization_start_of_block:
   case ndpi_serialization_start_of_list:
@@ -2474,7 +2481,7 @@
 }
 
 /* ********************************** */
-
+#if 0
 int ndpi_deserialize_value_float(ndpi_deserializer *_deserializer,
 				 float *value) {
   ndpi_private_deserializer *deserializer = (ndpi_private_deserializer*)_deserializer;
@@ -2503,7 +2510,7 @@
 
   return(0);
 }
-
+#endif
 /* ********************************** */
 
 /* Return the string value for the current element */
@@ -2589,6 +2596,7 @@
 /* ********************************** */
 
 /* Clone all elements in deserializer to serializer (this can be used to convert a TLV record to JSON) */
+#if 0
 int ndpi_deserialize_clone_all(ndpi_deserializer *deserializer, ndpi_serializer *serializer) {
   ndpi_serialization_type kt, et;
   u_int32_t u32, k32;
@@ -2680,5 +2688,5 @@
 
   return(0);
 }
-
+#endif
 /* ********************************** */
