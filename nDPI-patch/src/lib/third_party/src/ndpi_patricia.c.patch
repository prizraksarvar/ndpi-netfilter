--- /home/chrisn/src/ndpi-netfilter/nDPI//src/lib/third_party/src/ndpi_patricia.c	2022-06-30 09:34:28.890051275 -0400
+++ /home/chrisn/src/ndpi-netfilter/nDPI-patch//src/lib/third_party/src/ndpi_patricia.c	2022-06-30 13:27:38.030638935 -0400
@@ -38,7 +38,7 @@
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */
-
+#ifndef __KERNEL__
 #include <assert.h> /* assert */
 #include <ctype.h> /* isdigit */
 #include <errno.h> /* errno */
@@ -53,6 +53,9 @@
 #include <netinet/in.h> /* BSD, Linux: for inet_addr */
 #include <arpa/inet.h> /* BSD, Linux, Solaris: for inet_addr */
 #endif
+#else
+#define assert(x)
+#endif
 #include "ndpi_patricia.h"
 
 static void ndpi_DeleteEntry(void *a) {
@@ -182,7 +185,7 @@
   }
   else if(prefix->family == AF_INET6) {
     char *r;
-    r = (char *) inet_ntop (AF_INET6, &prefix->add.sin6, buff, 48 /* a guess value */ );
+    r = (char *) ndpi_inet_ntop (AF_INET6, &prefix->add.sin6, buff, 48 /* a guess value */ );
     if(r && with_len) {
       assert (prefix->bitlen <= sizeof(struct in6_addr) * 8);
       sprintf (buff + strlen (buff), "/%d", prefix->bitlen);
@@ -1026,7 +1029,7 @@
   ndpi_patricia_node_t *node;
 
   prefix = ndpi_ascii2prefix (AF_INET, string);
-  printf ("make_and_lookup: %s/%d\n", ndpi_prefix_toa (prefix), prefix->bitlen);
+  //printf ("make_and_lookup: %s/%d\n", ndpi_prefix_toa (prefix), prefix->bitlen);
   node = ndpi_patricia_lookup (tree, prefix);
   ndpi_Deref_Prefix (prefix);
   return (node);
@@ -1039,13 +1042,13 @@
   ndpi_patricia_node_t *node;
 
   prefix = ndpi_ascii2prefix (AF_INET, string);
-  printf ("try_search_exact: %s/%d\n", ndpi_prefix_toa (prefix), prefix->bitlen);
+  //printf ("try_search_exact: %s/%d\n", ndpi_prefix_toa (prefix), prefix->bitlen);
   if((node = patricia_search_exact (tree, prefix)) == NULL) {
-    printf ("try_search_exact: not found\n");
+    //printf ("try_search_exact: not found\n");
   }
   else {
-    printf ("try_search_exact: %s/%d found\n", 
-	    ndpi_prefix_toa (node->prefix), node->prefix->bitlen);
+    //printf ("try_search_exact: %s/%d found\n", 
+    ndpi_prefix_toa (node->prefix), node->prefix->bitlen);
   }
   ndpi_Deref_Prefix (prefix);
   return (node);
