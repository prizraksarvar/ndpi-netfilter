--- /home/chrisn/src/ndpi-netfilter/nDPI//src/lib/ndpi_analyze.c	2022-06-30 09:34:28.846051273 -0400
+++ /home/chrisn/src/ndpi-netfilter/nDPI-patch//src/lib/ndpi_analyze.c	2022-07-01 15:41:39.018960106 -0400
@@ -34,6 +34,9 @@
 #include "ndpi_api.h"
 #include "ndpi_config.h"
 
+#ifdef __KERNEL__
+#define printf printk
+#endif
 /* ********************************************************************************* */
 
 void ndpi_init_data_analysis(struct ndpi_analyze_struct *ret, u_int16_t _max_series_len) {
@@ -232,6 +235,7 @@
 /* ********************************************************************************* */
 
 void ndpi_data_print_window_values(struct ndpi_analyze_struct *s) {
+#if 0
   if(s->num_values_array_len) {
     u_int16_t i, n = ndpi_min(s->num_data_entries, s->num_values_array_len);
 
@@ -240,6 +244,7 @@
 
     printf("\n");
   }
+#endif
 }
 
 /* ********************************************************************************* */
@@ -495,6 +500,7 @@
 /* ********************************************************************************* */
 
 char* ndpi_print_bin(struct ndpi_bin *b, u_int8_t normalize_first, char *out_buf, u_int out_buf_len) {
+#if 0
   u_int16_t i;
   u_int len = 0;
 
@@ -531,7 +537,7 @@
     }
     break;
   }
-
+#endif
   return(out_buf);
 }
 
@@ -623,6 +629,7 @@
   See
   - https://en.wikipedia.org/wiki/K-means_clustering
  */
+#if 0
 int ndpi_cluster_bins(struct ndpi_bin *bins, u_int16_t num_bins,
 		      u_int8_t num_clusters, u_int16_t *cluster_ids,
 		      struct ndpi_bin *centroids) {
@@ -825,6 +832,7 @@
 
   return(0);
 }
+#endif
 
 /* ********************************************************************************* */
 
@@ -1245,6 +1253,7 @@
   Computes the best alpha value using the specified values used for training
 */
 void ndpi_ses_fitting(double *values, u_int32_t num_values, float *ret_alpha) {
+#if 0  
   u_int i;
   float alpha, best_alpha;
   double sse, lowest_sse;
@@ -1292,6 +1301,7 @@
     printf("BEST [alpha: %.2f][SSE: %.2f]\n", best_alpha, lowest_sse);
 
   *ret_alpha = best_alpha;
+#endif
 }
 
 /* *********************************************************** */
@@ -1375,6 +1385,7 @@
   Computes the best alpha and beta values using the specified values used for training
 */
 void ndpi_des_fitting(double *values, u_int32_t num_values, float *ret_alpha, float *ret_beta) {
+#if 0
   u_int i;
   float alpha, best_alpha, best_beta, beta = 0;
   double sse, lowest_sse;
@@ -1424,4 +1435,5 @@
     printf("BEST [alpha: %.2f][beta: %.2f][SSE: %.2f]\n", best_alpha, best_beta, lowest_sse);
 
   *ret_alpha = best_alpha, *ret_beta = best_beta;
+#endif
 }
